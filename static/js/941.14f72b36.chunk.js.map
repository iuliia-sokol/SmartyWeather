{"version":3,"file":"static/js/941.14f72b36.chunk.js","mappings":"uSAAaA,EAAiB,CAC5BC,MAAO,QACPC,SAAU,YACVC,SAAU,OACVC,QAAS,EACTC,SAAU,OACVC,aAAc,Q,sCCHHC,EAAe,mCAAG,WAAMC,GAAN,gGAETC,EAAAA,EAAAA,IAAA,UACbC,EAAAA,GADa,iBACiBF,EADjB,eAFS,cAErBG,EAFqB,yBAKpBA,EAAIC,KAAKC,SALW,gCAO3BC,QAAQC,IAAR,iDAP2B,yDAAH,sD,mBCDfC,EAAOC,EAAAA,GAAAA,KAAH,suBAiBA,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAMC,IAAlB,IACD,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,YAAY,EAAxB,IAED,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,YAAYF,IAAxB,IAWLG,EAAqBP,EAAAA,GAAAA,IAAH,8FAMlBQ,EAAYR,EAAAA,GAAAA,IAAH,4CAITS,EAAQT,EAAAA,GAAAA,MAAH,kEAKLU,EAAaV,EAAAA,GAAAA,KAAH,8JASVW,EAAQX,EAAAA,GAAAA,MAAH,6VAkBLY,EAAWZ,EAAAA,GAAAA,GAAH,2jBAcH,SAAAC,GAAC,OAAIA,EAAEC,MAAMW,OAAOC,MAAnB,IAOD,SAAAb,GAAC,OAAIA,EAAEC,MAAMW,OAAOE,QAAnB,IAQNC,EAAShB,EAAAA,GAAAA,GAAH,0HAQNiB,EAAyBjB,EAAAA,GAAAA,KAAH,yOAatBkB,EAAWlB,EAAAA,GAAAA,KAAH,sB,SC3FRmB,EAAa,SAAC,GAOpB,IANLC,EAMI,EANJA,WACAC,EAKI,EALJA,UACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,aACAC,EACI,EADJA,YAEA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GAAsBN,EAAAA,EAAAA,UAAS,IAA/B,eAAOO,EAAP,KAAYC,EAAZ,KACA,GAAwBR,EAAAA,EAAAA,UAAS,IAAjC,eAAOS,EAAP,KAAaC,EAAb,KACA,GAAgCV,EAAAA,EAAAA,UAAS,IAAzC,eAAOW,EAAP,KAAiBC,EAAjB,KACA,IAAoDZ,EAAAA,EAAAA,UAAS,IAA7D,iBAAOa,GAAP,MAA2BC,GAA3B,MACA,IAA8Cd,EAAAA,EAAAA,UAAS,IAAvD,iBAAOe,GAAP,MAAwBC,GAAxB,MAEMC,IAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHlB,GACHN,GAEH,GAAE,CAACM,EAAMN,IAEV,IAuBMyB,GAAgB,mCAAG,WAAMC,GAAN,0EACvBnB,EAAQmB,EAAEC,OAAOC,OACjB1B,GAAe,GAEVI,EAJkB,iEAMLrC,EAAgBqC,GANX,OAMjBjC,EANiB,QAQtB6C,GAAmBW,SAASH,EAAEC,OAAOC,QACpCvD,GACA8C,GACE9C,EACGyD,QAAO,SAAAC,GAAK,MAA2B,SAAvBA,EAAMC,YAAV,IACZC,KAAI,SAAAF,GACH,OAAIA,EAAMG,OACD,CACL5B,KAAMyB,EAAMI,KACZC,YAAaL,EAAMvB,QACnB6B,OAAQN,EAAMG,OACdI,YAAaP,EAAMQ,aAAaC,cAChCC,SAAUV,EAAMU,SAChBC,UAAWX,EAAMW,UACjB1B,SAAUe,EAAMf,UAGb,CACLV,KAAMyB,EAAMI,KACZC,YAAaL,EAAMvB,QACnB6B,OAAQ,GACRC,YAAaP,EAAMQ,aAAaC,cAChCC,SAAUV,EAAMU,SAChBC,UAAWX,EAAMW,UACjB1B,SAAUe,EAAMf,SAEnB,KAEH3C,GAAOA,EAAIsE,OACbtB,GAAmBhD,EAAIsE,OArCF,2CAAH,sDAyChBC,GAAY,WAChBrC,EAAQ,IACRY,GAAsB,IACtBE,GAAmB,IACnBrB,GACD,EAED,OACE,SAACtB,EAAD,CAAMmE,SAxEa,SAAAC,GACnBA,EAAMC,iBACDrC,GACHsC,IAAAA,OAAAA,KAAqB,yBAA0BtF,GAE7CgD,IACFY,IAAS2B,EAAAA,EAAAA,IAAYrC,IACrBU,IAAS4B,EAAAA,EAAAA,GAAapC,IACtBQ,IAAS6B,EAAAA,EAAAA,IAAmB7C,IAC5BgB,IAAS8B,EAAAA,EAAAA,IAAsB5C,IAC/Bc,IAAS+B,EAAAA,EAAAA,IAA6B,CAAEzC,IAAAA,EAAKE,KAAAA,KAC7CQ,IAASgC,EAAAA,EAAAA,IAAkC,CAAE1C,IAAAA,EAAKE,KAAAA,KAClDQ,IAASiC,EAAAA,EAAAA,IAAmC,CAAE3C,IAAAA,EAAKE,KAAAA,KACnDQ,IAASkC,EAAAA,EAAAA,IAAoB,CAAE5C,IAAAA,EAAKE,KAAAA,EAAME,SAAAA,KAC1CM,IAASmC,EAAAA,EAAAA,IAAgB,CAAE7C,IAAAA,EAAKE,KAAAA,EAAME,SAAAA,KACtCb,GAAa,GACbC,GAAY,GACZkB,IAASoC,EAAAA,EAAAA,IAAiBpD,KAG5BsC,IACD,EAmDC,UACE,SAAC1D,EAAD,WACE,UAACC,EAAD,YACE,SAACC,EAAD,UACGgC,KAAmB,SAAC/B,EAAD,UAAa+B,QAEnC,SAAC9B,EAAD,CACEqE,KAAK,OACLC,GAAG,OACHzB,KAAK,OACL0B,SAAUpC,GACVG,MAAOtB,EACPwD,UAAQ,EACRC,aAAa,MACbC,YAAY,iCAEd,SAACzE,EAAD,CACE0E,MAAO,CAAEC,QAASjE,EAAc,OAAS,SACzCkE,IAAKpE,EAFP,SAIGmB,GAAmBe,KAAI,SAACmC,EAAMC,GAAP,OACtB,UAAC1E,EAAD,CAEE2E,QAAS,WACPtE,EAAUoE,EAAK9D,MACfC,EAAQ6D,EAAK9D,MACbO,EAAOuD,EAAK3B,UACZ1B,EAAQqD,EAAK1B,WACbzB,EAAYmD,EAAKpD,UACjBP,EAAW2D,EAAKhC,aAChBzB,GAAgB,EACjB,EAVH,WAYE,gBACE4D,IAAG,UAAKC,EAAAA,IAAL,OAAiBJ,EAAK9B,YAAtB,QACH3E,MAAM,KACN8G,IAAI,UAGN,UAAC5E,EAAD,WACGuE,EAAK9D,KADR,KACgB8D,EAAK/B,OADrB,KAC+B+B,EAAKhC,iBAlB/B,GAAKgC,EAAOC,EAFG,OAyB1B,SAACzE,EAAD,yEAGA,SAAC8E,EAAA,EAAD,CAAUf,KAAK,SAASgB,KAAK,SAASC,MAAM,gBAKrD,E,SCtLYC,EAAgBlG,EAAAA,GAAAA,IAAH,iKCelBmG,EAAcC,EAAQ,MAAtBD,UAEFE,EAAa,WACjB,IAAM1D,GAAWC,EAAAA,EAAAA,MAEXjB,GAAO2E,EAAAA,EAAAA,IAAYC,EAAAA,IACnBC,GAAUF,EAAAA,EAAAA,IAAYG,EAAAA,IACtBC,GAAeJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC3BC,GAASN,EAAAA,EAAAA,IAAYO,EAAAA,IACrBC,GAAWR,EAAAA,EAAAA,IAAYS,EAAAA,IACvB3F,GAAa4F,EAAAA,EAAAA,UACnB,GAAsCtF,EAAAA,EAAAA,WAAS,GAA/C,eAAOJ,EAAP,KAAoBC,EAApB,KACA,GAAkCG,EAAAA,EAAAA,WAAS,GAA3C,eAAOuF,EAAP,KAAkBzF,EAAlB,KACA,GAAgCE,EAAAA,EAAAA,WAAS,GAAzC,eAAOwF,EAAP,KAAiBzF,EAAjB,MAEAoB,EAAAA,EAAAA,YAAU,WACJlB,GAA0B,IAAlBiF,EAAOO,QACjBxE,GAASyE,EAAAA,EAAAA,MAEZ,GAAE,CAACzF,EAAMgB,EAAUiE,EAAOO,SAE3B,IAKM9F,EAAY,WAChBE,GAAe,EAChB,EAMD,OACE,kBACE+D,MAAO,CACL+B,UAAW,QAEb1B,QAlBoB,SAAAxB,GAClBA,EAAMmD,gBAAkBlG,GAC1BC,GAEH,EAUC,WAME,SAACkG,EAAA,EAAD,CACEC,SAAUP,EAAYQ,EAAAA,GAAgBZ,EAAAA,GACtCa,KAAK,YAEP,UAACvB,EAAD,WACGe,GACC,SAAC/F,EAAD,CACEC,WAAYA,EACZE,YAAaA,EACbC,eAAgBA,EAChBF,UAAWA,EACX4F,UAAWA,EACXzF,aAAcA,EACdC,YAAaA,KAGf,SAACyE,EAAD,WACE,SAACH,EAAA,EAAD,CACEf,KAAK,SACLgB,KAAK,uBACLL,QA/BiB,WAC3BlE,GAAayF,EACd,MAiCMD,GAAaT,GAAWE,GAAgBI,IAAY,SAACa,EAAA,EAAD,SAI5D,EAED,EAAeC,EAAAA,KAAWvB,E","sources":["utils/notifySettings.jsx","services/citySearchAPI.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/SearchPage/SearchPage.styled.js","pages/SearchPage/SearchPage.jsx"],"sourcesContent":["export const notifySettings = {\n  width: '380px',\n  position: 'right-top',\n  distance: '10px',\n  opacity: 1,\n  fontSize: '20px',\n  borderRadius: '12px',\n};\n","import axios from 'axios';\nimport { OPEN_METEO_SEARCH_URL } from 'utils/consts/consts';\n\nexport const fetchCityByName = async query => {\n  try {\n    const res = await axios.get(\n      `${OPEN_METEO_SEARCH_URL}?name=${query}&count=100`\n    );\n    return res.data.results;\n  } catch (err) {\n    console.log(`${err}: 'Unable to retrieve places'`);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  box-sizing: border-box;\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  height: fit-content;\n  padding: 32px 16px;\n  background: rgba(255, 255, 255, 0.33);\n  border-radius: 30px;\n  margin: 0 auto;\n  margin-bottom: 56px;\n  gap: 32px;\n  box-shadow: inset -5px -5px 9px rgba(255, 255, 255, 0.45),\n    inset 5px 5px 9px rgba(94, 104, 121, 0.3);\n  backdrop-filter: blur(5.3px);\n  -webkit-backdrop-filter: blur(5.3px);\n  border: 1px solid rgba(255, 255, 255, 0.77);\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[0]};\n  font-size: 20px;\n  line-height: ${p => p.theme.lineHeights.main};\n\n  @media screen and (min-width: 768px) {\n    padding: 32px 56px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 70%;\n  }\n`;\n\nexport const PlacesAutocomplete = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const InputWrap = styled.div`\n  max-width: 100%;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 8px;\n`;\n\nexport const InputError = styled.span`\n  background: #ff00002e;\n  border-radius: 20px;\n  display: inline-block;\n  font-size: 14px;\n  margin-left: 4px;\n  padding: 8px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 16px;\n  margin-bottom: 8px;\n  border: none;\n  box-sizing: border-box;\n  display: block;\n  height: 42px;\n  padding: 12px 16px;\n  width: 100%;\n  max-width: 100%;\n  background-color: rgba(255, 255, 255, 0.63);\n  font-size: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const DataList = styled.ul`\n  border-radius: 16px;\n  max-height: 30vh;\n  max-width: 100%;\n  overflow-y: scroll;\n  background-color: rgba(255, 255, 255, 0.63);\n\n  /* ::-webkit-scrollbar {\n    width: 10px;\n\n    overflow: hidden;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: ${p => p.theme.colors.bgGrey};\n    border-radius: 30px;\n    max-height: 90%;\n    background-image: url('https://www.transparenttextures.com/patterns/black-paper.png');\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${p => p.theme.colors.textGrey};\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #8bba98;\n  } */\n`;\n\nexport const Option = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 16px;\n  max-width: 100%;\n`;\n\nexport const PlacesAutocompleteHint = styled.span`\n  display: inline-block;\n  font-size: 12px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    margin-top: 12px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const CityName = styled.span``;\n","import { ButtonUI } from 'components/Button/Button';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { notifySettings } from 'utils/notifySettings';\nimport {\n  fetchAirQuality,\n  fetchAstroDataFromWeatherApi,\n  fetchCurrentWeather,\n  fetchCurrentWeatherFromWeatherApi,\n  fetchPexelsImage,\n  fetchWeatherForecastFromWeatherApi,\n} from 'redux/location/locOperations';\nimport {\n  setLatitude,\n  setLongitude,\n  setCityBySelection,\n  setCountryBySelection,\n} from 'redux/location/locSlice';\nimport { fetchCityByName } from 'services/citySearchAPI';\nimport { FLAGS_URL } from 'utils/consts/consts';\nimport {\n  CityName,\n  DataList,\n  Form,\n  Input,\n  InputError,\n  InputWrap,\n  Label,\n  Option,\n  PlacesAutocomplete,\n  PlacesAutocompleteHint,\n} from './SearchForm.styled';\n\nexport const SearchForm = ({\n  elementRef,\n  hideSuggs,\n  isHideSuggs,\n  setIsHideSuggs,\n  setSelection,\n  setShowForm,\n}) => {\n  const [city, setCity] = useState('');\n  const [country, setCountry] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [lat, setLat] = useState('');\n  const [long, setLong] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [autocompleteErr, setAutocompleteErr] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!city) {\n      hideSuggs();\n    }\n  }, [city, hideSuggs]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!selectedCity) {\n      Notiflix.Notify.info('You should select city', notifySettings);\n    }\n    if (selectedCity) {\n      dispatch(setLatitude(lat));\n      dispatch(setLongitude(long));\n      dispatch(setCityBySelection(city));\n      dispatch(setCountryBySelection(country));\n      dispatch(fetchAstroDataFromWeatherApi({ lat, long }));\n      dispatch(fetchCurrentWeatherFromWeatherApi({ lat, long }));\n      dispatch(fetchWeatherForecastFromWeatherApi({ lat, long }));\n      dispatch(fetchCurrentWeather({ lat, long, timezone }));\n      dispatch(fetchAirQuality({ lat, long, timezone }));\n      setSelection(true);\n      setShowForm(false);\n      dispatch(fetchPexelsImage(city));\n    }\n\n    resetForm();\n  };\n\n  const handleCityChange = async e => {\n    setCity(e.target.value);\n    setIsHideSuggs(false);\n\n    if (!city) return;\n\n    const res = await fetchCityByName(city);\n\n    !autocompleteCities.includes(e.target.value) &&\n      res &&\n      setAutocompleteCities(\n        res\n          .filter(place => place.feature_code !== 'AIRP')\n          .map(place => {\n            if (place.admin1) {\n              return {\n                city: place.name,\n                countryName: place.country,\n                region: place.admin1,\n                countryCode: place.country_code.toLowerCase(),\n                latitude: place.latitude,\n                longitude: place.longitude,\n                timezone: place.timezone,\n              };\n            }\n            return {\n              city: place.name,\n              countryName: place.country,\n              region: '',\n              countryCode: place.country_code.toLowerCase(),\n              latitude: place.latitude,\n              longitude: place.longitude,\n              timezone: place.timezone,\n            };\n          })\n      );\n    if (res && res.error) {\n      setAutocompleteErr(res.error);\n    }\n  };\n\n  const resetForm = () => {\n    setCity('');\n    setAutocompleteCities([]);\n    setAutocompleteErr('');\n    hideSuggs();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <PlacesAutocomplete>\n        <InputWrap>\n          <Label>\n            {autocompleteErr && <InputError>{autocompleteErr}</InputError>}\n          </Label>\n          <Input\n            type=\"text\"\n            id=\"city\"\n            name=\"city\"\n            onChange={handleCityChange}\n            value={city}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Start typing your city name\"\n          />\n          <DataList\n            style={{ display: isHideSuggs ? 'none' : 'block' }}\n            ref={elementRef}\n          >\n            {autocompleteCities.map((item, idx) => (\n              <Option\n                key={'' + item + idx}\n                onClick={() => {\n                  hideSuggs(item.city);\n                  setCity(item.city);\n                  setLat(item.latitude);\n                  setLong(item.longitude);\n                  setTimezone(item.timezone);\n                  setCountry(item.countryName);\n                  setSelectedCity(true);\n                }}\n              >\n                <img\n                  src={`${FLAGS_URL}${item.countryCode}.svg`}\n                  width=\"30\"\n                  alt=\"flag\"\n                />\n\n                <CityName>\n                  {item.city}, {item.region}, {item.countryName}\n                </CityName>\n              </Option>\n            ))}\n          </DataList>\n          <PlacesAutocompleteHint>\n            *start typing and choose your city from the given options\n          </PlacesAutocompleteHint>\n          <ButtonUI type=\"submit\" text=\"Submit\" color=\"white\" />\n        </InputWrap>\n      </PlacesAutocomplete>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ButtonWrapper = styled.div`\n  box-sizing: border-box;\n  margin: 0 auto;\n  margin-bottom: 32px;\n\n  @media screen and (min-width: 1280px) {\n    width: 70%;\n  }\n`;\n","import { ButtonUI } from 'components/Button/Button';\nimport { CardUI } from 'components/Card/Card';\nimport { MainBoxUI } from 'components/MainBox/MainBox';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGeoImage } from 'redux/location/locOperations';\nimport {\n  getAdditionalCurrentWeather,\n  getCityImages,\n  getCityName,\n  getGeoImages,\n  getCurrentWeather,\n  getForcast,\n} from 'redux/location/locSelectors';\nimport { ButtonWrapper } from './SearchPage.styled';\n\nconst { Container } = require('components/Container/Container');\n\nconst SearchPage = () => {\n  const dispatch = useDispatch();\n\n  const city = useSelector(getCityName);\n  const weather = useSelector(getCurrentWeather);\n  const extraWeather = useSelector(getAdditionalCurrentWeather);\n  const images = useSelector(getGeoImages);\n  const forecast = useSelector(getForcast);\n  const elementRef = useRef();\n  const [isHideSuggs, setIsHideSuggs] = useState(false);\n  const [selection, setSelection] = useState(false);\n  const [showForm, setShowForm] = useState(true);\n\n  useEffect(() => {\n    if (city && images.length === 0) {\n      dispatch(fetchGeoImage());\n    }\n  }, [city, dispatch, images.length]);\n\n  const onBackdropClick = event => {\n    if (event.currentTarget !== elementRef) {\n      hideSuggs();\n    }\n  };\n  const hideSuggs = () => {\n    setIsHideSuggs(true);\n  };\n\n  const onSearchMoreBtnClick = () => {\n    setShowForm(!showForm);\n  };\n\n  return (\n    <main\n      style={{\n        minHeight: '70vh',\n      }}\n      onClick={onBackdropClick}\n    >\n      <CardUI\n        selector={selection ? getCityImages : getGeoImages}\n        page=\"search\"\n      />\n      <Container>\n        {showForm ? (\n          <SearchForm\n            elementRef={elementRef}\n            isHideSuggs={isHideSuggs}\n            setIsHideSuggs={setIsHideSuggs}\n            hideSuggs={hideSuggs}\n            selection={selection}\n            setSelection={setSelection}\n            setShowForm={setShowForm}\n          />\n        ) : (\n          <ButtonWrapper>\n            <ButtonUI\n              type=\"button\"\n              text=\"Check other location\"\n              onClick={onSearchMoreBtnClick}\n            />\n          </ButtonWrapper>\n        )}\n        {selection && weather && extraWeather && forecast && <MainBoxUI />}\n      </Container>\n    </main>\n  );\n};\n\nexport default React.memo(SearchPage);\n"],"names":["notifySettings","width","position","distance","opacity","fontSize","borderRadius","fetchCityByName","query","axios","OPEN_METEO_SEARCH_URL","res","data","results","console","log","Form","styled","p","theme","fonts","main","fontWeights","lineHeights","PlacesAutocomplete","InputWrap","Label","InputError","Input","DataList","colors","bgGrey","textGrey","Option","PlacesAutocompleteHint","CityName","SearchForm","elementRef","hideSuggs","isHideSuggs","setIsHideSuggs","setSelection","setShowForm","useState","city","setCity","country","setCountry","selectedCity","setSelectedCity","lat","setLat","long","setLong","timezone","setTimezone","autocompleteCities","setAutocompleteCities","autocompleteErr","setAutocompleteErr","dispatch","useDispatch","useEffect","handleCityChange","e","target","value","includes","filter","place","feature_code","map","admin1","name","countryName","region","countryCode","country_code","toLowerCase","latitude","longitude","error","resetForm","onSubmit","event","preventDefault","Notiflix","setLatitude","setLongitude","setCityBySelection","setCountryBySelection","fetchAstroDataFromWeatherApi","fetchCurrentWeatherFromWeatherApi","fetchWeatherForecastFromWeatherApi","fetchCurrentWeather","fetchAirQuality","fetchPexelsImage","type","id","onChange","required","autoComplete","placeholder","style","display","ref","item","idx","onClick","src","FLAGS_URL","alt","Button","text","color","ButtonWrapper","Container","require","SearchPage","useSelector","getCityName","weather","getCurrentWeather","extraWeather","getAdditionalCurrentWeather","images","getGeoImages","forecast","getForcast","useRef","selection","showForm","length","fetchGeoImage","minHeight","currentTarget","Card","selector","getCityImages","page","MainBox","React"],"sourceRoot":""}