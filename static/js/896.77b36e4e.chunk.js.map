{"version":3,"file":"static/js/896.77b36e4e.chunk.js","mappings":"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","sources":["utils/notifySettings.jsx","services/citySearchAPI.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/SearchPage/SearchPage.jsx"],"sourcesContent":["export const notifySettings = {\n  width: '380px',\n  position: 'right-top',\n  distance: '10px',\n  opacity: 1,\n  fontSize: '20px',\n  borderRadius: '12px',\n};\n","import axios from 'axios';\nimport { OPEN_METEO_SEARCH_URL } from 'utils/consts/consts';\n\nexport const fetchCityByName = async query => {\n  try {\n    const res = await axios.get(\n      `${OPEN_METEO_SEARCH_URL}?name=${query}&count=100`\n    );\n    return res.data.results;\n  } catch (err) {\n    console.log(`${err}: 'Unable to retrieve places'`);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: fit-content;\n  padding: 32px 16px;\n  background: rgba(255, 255, 255, 0.33);\n  border-radius: 30px;\n  margin: 0 auto;\n  margin-bottom: 56px;\n  gap: 32px;\n  box-shadow: inset -5px -5px 9px rgba(255, 255, 255, 0.45),\n    inset 5px 5px 9px rgba(94, 104, 121, 0.3);\n  backdrop-filter: blur(5.3px);\n  -webkit-backdrop-filter: blur(5.3px);\n  border: 1px solid rgba(255, 255, 255, 0.77);\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[0]};\n  font-size: 20px;\n  line-height: ${p => p.theme.lineHeights.main};\n\n  @media screen and (min-width: 768px) {\n    padding: 32px 56px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 70%;\n  }\n`;\n\nexport const PlacesAutocomplete = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const InputWrap = styled.div`\n  padding: 8px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 8px;\n`;\n\nexport const InputError = styled.span`\n  background: #ff00002e;\n  border-radius: 20px;\n  display: inline-block;\n  font-size: 14px;\n  margin-left: 4px;\n  padding: 8px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 16px;\n  border: none;\n  box-sizing: border-box;\n  display: block;\n  height: 42px;\n  padding: 12px 16px;\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.63);\n  font-size: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const DataList = styled.ul`\n  border-radius: 16px;\n  max-height: 20vh;\n  overflow-y: scroll;\n  background-color: rgba(255, 255, 255, 0.63);\n`;\n\nexport const Option = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 16px;\n`;\n\nexport const PlacesAutocompleteHint = styled.span`\n  display: inline-block;\n  font-size: 12px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    margin-top: 12px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const CityName = styled.span``;\n","import { ButtonUI } from 'components/Button/Button';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { notifySettings } from 'utils/notifySettings';\nimport {\n  fetchAirQuality,\n  fetchAstroDataFromWeatherApi,\n  fetchCity,\n  fetchCurrentWeather,\n  fetchCurrentWeatherFromWeatherApi,\n  fetchPexelsImage,\n  fetchWeatherForecastFromWeatherApi,\n} from 'redux/location/locOperations';\nimport { setLatitude, setLongitude } from 'redux/location/locSlice';\nimport { fetchCityByName } from 'services/citySearchAPI';\nimport { FLAGS_URL } from 'utils/consts/consts';\nimport {\n  CityName,\n  DataList,\n  Form,\n  Input,\n  InputError,\n  InputWrap,\n  Label,\n  Option,\n  PlacesAutocomplete,\n  PlacesAutocompleteHint,\n} from './SearchForm.styled';\n\nexport const SearchForm = ({\n  elementRef,\n  hideSuggs,\n  isHideSuggs,\n  setIsHideSuggs,\n  setSelection,\n}) => {\n  const [city, setCity] = useState('');\n  const [selectedCity, setSelectedCity] = useState('');\n  const [lat, setLat] = useState('');\n  const [long, setLong] = useState('');\n  const [timezone, setTimezone] = useState('');\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [autocompleteErr, setAutocompleteErr] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!city) {\n      hideSuggs();\n    }\n  }, [city, hideSuggs]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!selectedCity) {\n      Notiflix.Notify.info('You should select city', notifySettings);\n    }\n    if (selectedCity) {\n      dispatch(setLatitude(lat));\n      dispatch(setLongitude(long));\n      dispatch(fetchCity({ lat, long }));\n      dispatch(fetchAstroDataFromWeatherApi({ lat, long }));\n      dispatch(fetchCurrentWeatherFromWeatherApi({ lat, long }));\n      dispatch(fetchWeatherForecastFromWeatherApi({ lat, long }));\n      dispatch(fetchCurrentWeather({ lat, long, timezone }));\n      dispatch(fetchAirQuality({ lat, long, timezone }));\n      setSelection(true);\n      dispatch(fetchPexelsImage(city));\n    }\n\n    resetForm();\n  };\n\n  const handleCityChange = async e => {\n    setCity(e.target.value);\n    setIsHideSuggs(false);\n\n    if (!city) return;\n\n    const res = await fetchCityByName(city);\n\n    !autocompleteCities.includes(e.target.value) &&\n      res &&\n      setAutocompleteCities(\n        res.map(place => {\n          if (place.admin1) {\n            return {\n              city: place.name,\n              region: place.admin1,\n              country: place.country_code.toLowerCase(),\n              latitude: place.latitude,\n              longitude: place.longitude,\n              timezone: place.timezone,\n            };\n          }\n          return {\n            city: place.name,\n            region: '',\n            country: place.country_code.toLowerCase(),\n            latitude: place.latitude,\n            longitude: place.longitude,\n            timezone: place.timezone,\n          };\n        })\n      );\n    if (res && res.error) {\n      setAutocompleteErr(res.error);\n    }\n  };\n\n  const resetForm = () => {\n    setCity('');\n    setAutocompleteCities([]);\n    setAutocompleteErr('');\n    hideSuggs();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <PlacesAutocomplete>\n        <InputWrap>\n          <Label>\n            {autocompleteErr && <InputError>{autocompleteErr}</InputError>}\n          </Label>\n          <Input\n            type=\"text\"\n            id=\"city\"\n            name=\"city\"\n            onChange={handleCityChange}\n            value={city}\n            required\n            autoComplete=\"off\"\n            placeholder=\"Start typing your city name\"\n          />\n          <DataList\n            style={{ display: isHideSuggs ? 'none' : 'block' }}\n            ref={elementRef}\n          >\n            {autocompleteCities.map((item, idx) => (\n              <Option\n                key={'' + item + idx}\n                onClick={() => {\n                  hideSuggs(item.city);\n                  setCity(item.city);\n                  setLat(item.latitude);\n                  setLong(item.longitude);\n                  setTimezone(item.timezone);\n                  setSelectedCity(true);\n                }}\n              >\n                <img\n                  src={`${FLAGS_URL}${item.country}.svg`}\n                  width=\"30\"\n                  alt=\"flag\"\n                />\n\n                <CityName>\n                  {item.city}, {item.region}\n                </CityName>\n              </Option>\n            ))}\n          </DataList>\n          <PlacesAutocompleteHint>\n            *start typing and choose your city from the given options\n          </PlacesAutocompleteHint>\n          <ButtonUI type=\"submit\" text=\"Submit\" color=\"white\" />\n        </InputWrap>\n      </PlacesAutocomplete>\n    </Form>\n  );\n};\n","import { CardUI } from 'components/Card/Card';\nimport { MainBoxUI } from 'components/MainBox/MainBox';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGeoImage } from 'redux/location/locOperations';\nimport {\n  getAdditionalCurrentWeather,\n  getCityImages,\n  getCityName,\n  getGeoImages,\n  getCurrentWeather,\n} from 'redux/location/locSelectors';\n\nconst { Container } = require('components/Container/Container');\n\nconst SearchPage = () => {\n  const dispatch = useDispatch();\n\n  const city = useSelector(getCityName);\n  const weather = useSelector(getCurrentWeather);\n  const extraWeather = useSelector(getAdditionalCurrentWeather);\n  const images = useSelector(getGeoImages);\n  const elementRef = useRef();\n  const [isHideSuggs, setIsHideSuggs] = useState(false);\n  const [selection, setSelection] = useState(false);\n\n  useEffect(() => {\n    if (city && images.length === 0) {\n      dispatch(fetchGeoImage());\n    }\n  }, [city, dispatch, images.length]);\n\n  const onBackdropClick = event => {\n    if (event.currentTarget !== elementRef) {\n      hideSuggs();\n    }\n  };\n  const hideSuggs = () => {\n    setIsHideSuggs(true);\n  };\n\n  return (\n    <main\n      style={{\n        minHeight: '70vh',\n      }}\n      onClick={onBackdropClick}\n    >\n      <CardUI\n        selector={selection ? getCityImages : getGeoImages}\n        page=\"search\"\n      />\n      <Container>\n        <SearchForm\n          elementRef={elementRef}\n          isHideSuggs={isHideSuggs}\n          setIsHideSuggs={setIsHideSuggs}\n          hideSuggs={hideSuggs}\n          selection={selection}\n          setSelection={setSelection}\n        />\n        {selection && weather && extraWeather && <MainBoxUI />}\n      </Container>\n    </main>\n  );\n};\n\nexport default React.memo(SearchPage);\n"],"names":["notifySettings","width","position","distance","opacity","fontSize","borderRadius","fetchCityByName","query","axios","OPEN_METEO_SEARCH_URL","res","data","results","console","log","Form","styled","p","theme","fonts","main","fontWeights","lineHeights","PlacesAutocomplete","InputWrap","Label","InputError","Input","DataList","Option","PlacesAutocompleteHint","CityName","SearchForm","elementRef","hideSuggs","isHideSuggs","setIsHideSuggs","setSelection","useState","city","setCity","selectedCity","setSelectedCity","lat","setLat","long","setLong","timezone","setTimezone","autocompleteCities","setAutocompleteCities","autocompleteErr","setAutocompleteErr","dispatch","useDispatch","useEffect","handleCityChange","e","target","value","includes","map","place","admin1","name","region","country","country_code","toLowerCase","latitude","longitude","error","resetForm","onSubmit","event","preventDefault","Notiflix","setLatitude","setLongitude","fetchCity","fetchAstroDataFromWeatherApi","fetchCurrentWeatherFromWeatherApi","fetchWeatherForecastFromWeatherApi","fetchCurrentWeather","fetchAirQuality","fetchPexelsImage","type","id","onChange","required","autoComplete","placeholder","style","display","ref","item","idx","onClick","src","FLAGS_URL","alt","Button","text","color","Container","require","SearchPage","useSelector","getCityName","weather","getCurrentWeather","extraWeather","getAdditionalCurrentWeather","images","getGeoImages","useRef","selection","length","fetchGeoImage","minHeight","currentTarget","Card","selector","getCityImages","page","MainBox","React"],"sourceRoot":""}