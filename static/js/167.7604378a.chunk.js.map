{"version":3,"file":"static/js/167.7604378a.chunk.js","mappings":"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","sources":["components/Card/Card.styled.js","redux/location/locSelectors.js","components/Card/Card.jsx","hooks/useMedia.js","components/ChartBox/Charts.styled.js","components/ChartBox/Charts.jsx","components/WeatherBox/WeatherBox.styled.jsx","components/AstroBox/AstroBox.styled.js","components/AstroBox/AstroBox.jsx","components/WeatherBox/WeatherBox.jsx","utils/conditionsWeatherApi.js","components/pages/Homepage/Homepage.styled.js","components/pages/Homepage/Homepage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100vh;\n  box-sizing: border-box;\n\n  /* @media screen and (min-width: 320px) {\n    width: 320px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 1280px;\n  } */\n`;\n","export const getCityId = state => state.location.cityID;\nexport const getCityName = state => state.location.city;\nexport const getCountry = state => state.location.country;\nexport const getCityImages = state => state.location.image;\nexport const getCurrentLongitude = state => state.location.longitude;\nexport const getCurrentLatitude = state => state.location.latitude;\nexport const getCurrentWeather = state => state.location.weather;\nexport const getAdditionalCurrentWeather = state =>\n  state.location.weatherAdditional;\nexport const getDayTime = state => state.location.daytime;\nexport const getTimezone = state => state.location.timezone;\nexport const getAstroData = state => state.location.astrodata;\n// export const getForcast = state => state.location.weatherForecast;\nexport const getForcast = state => state.location.weather.daily;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPexelsImage } from 'redux/location/locOperations';\nimport { useState } from 'react';\nimport { Card } from './Card.styled';\nimport { getCityImages, getCityName } from 'redux/location/locSelectors';\nimport { useMediaQuery } from 'hooks/useMedia';\nimport bgImgMob from '../../images/umbrella-red-wallpaper-mob.jpg';\nimport bgImg from '../../images/umbrella-red-wallpaper.jpg'; // 'https://www.wallpaperflare.com/static/79/210/459/nature-sky-umbrella-red-wallpaper-preview.jpg';\n\nexport function CardUI() {\n  const isRowBased = useMediaQuery('(min-width: 500px)');\n  const city = useSelector(getCityName);\n  const images = useSelector(getCityImages);\n\n  const [image, setImage] = useState('');\n  const [imageMob, setImageMob] = useState('');\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (city) {\n      dispatch(fetchPexelsImage());\n    }\n  }, [city, dispatch]);\n\n  useEffect(() => {\n    if (images.length === 1) {\n      setImage(images[0].landscape);\n      setImageMob(images[0].portrait);\n    }\n    if (images.length > 1) {\n      const random = Math.floor(Math.random() * images.length);\n      setImage(images[random].landscape);\n      setImageMob(images[random].portrait);\n    }\n  }, [images]);\n\n  return (\n    <Card\n      style={{\n        backgroundImage: !isRowBased\n          ? `url(${imageMob ?? bgImgMob})`\n          : `url(${image ?? bgImg})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n      }}\n    ></Card>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport const useMediaQuery = query => {\n  const mediaMatch = window.matchMedia(query);\n  const [matches, setMatches] = useState(mediaMatch.matches);\n\n  useEffect(() => {\n    const handler = e => setMatches(e.matches);\n    mediaMatch.addListener(handler);\n    return () => mediaMatch.removeListener(handler);\n  });\n  return matches;\n};\n","import styled from 'styled-components';\n\nexport const ChartsWrapper = styled.div`\n  width: 100%;\n  height: 250px;\n`;\n","// import {\n//   // main component\n//   Chart,\n//   // graphs\n//   Bars,\n//   Cloud,\n//   Dots,\n//   Labels,\n//   Lines,\n//   Pies,\n//   RadialLines,\n//   Ticks,\n//   Title,\n//   // wrappers\n//   Layer,\n//   Animate,\n//   Transform,\n//   Handlers,\n//   // helpers\n//   DropShadow,\n//   Gradient,\n// } from 'rumble-charts';\n\nimport { useSelector } from 'react-redux';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  //   YAxis,\n  //   CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { getForcast } from 'redux/location/locSelectors';\nimport { ChartsWrapper } from './Charts.styled';\n\nexport const ChartsUI = () => {\n  const forecast = useSelector(getForcast);\n\n  //   const dates = forecast.map(el => {\n  //     return { date: `${el.date}`, temp: `${el.day.maxtemp_c}` };\n  //   });\n\n  const dates = forecast.time.map(el => el);\n  const tempMin = forecast.temperature_2m_min.map(el => el);\n  const tempMax = forecast.temperature_2m_max.map(el => el);\n\n  //   console.log('charts forecast', forecast)\n  const data = dates.map((el, index) => {\n    return {\n      date: `${el}`,\n      min_temperature: `${tempMin[index]}`,\n      max_temperature: `${tempMax[index]}`,\n    };\n  });\n\n  console.log(data);\n  return (\n    <ChartsWrapper>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={200}\n          height={200}\n          data={data}\n          fill=\"rgba(233, 201, 57, 0.25)\"\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <Tooltip />\n          <XAxis dataKey=\"date\" />\n          <Area\n            type=\"monotone\"\n            stackId=\"1\"\n            dataKey=\"min_temperature\"\n            stroke=\"#E9C939\"\n            strokeWidth={3}\n            fill=\"rgba(233, 201, 57, 0.25)\"\n          />\n          <Area\n            type=\"monotone\"\n            stackId=\"1\"\n            dataKey=\"max_temperature\"\n            stroke=\"#4be939\"\n            strokeWidth={3}\n            fill=\"rgba(235, 209, 131, 0.267)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </ChartsWrapper>\n  );\n};\n\n// <Chart\n//   series={[\n//     {\n//       data: [10, 11, 12, 13, 12, 12, 15, 16, 15, 17, 18, 20],\n//     },\n//   ]}\n//   viewBox=\"0 0 300 150\"\n// >\n//   <Handlers\n//     optimized={true}\n//     distance=\"x\"\n//     onMouseLeave={function noRefCheck() {}}\n//     onMouseMove={function noRefCheck() {}}\n//   >\n//     <Layer height=\"68%\" position=\"middle center\" width=\"100%\">\n//       <Bars\n//         combined\n//         barAttributes={{\n//           stroke: 'rgba(233, 201, 57, 0.25)',\n//           strokeLinejoin: 'round',\n//           strokeWidth: 23,\n//           transform: 'translate(0 12)',\n//         }}\n//         barWidth=\"0%\"\n//         colors={['rgba(233, 201, 57, 0.25)']}\n//         //   groupPadding=\"1%\"\n//         // innerPadding=\"0%\"\n//         // interpolation=\"cardinal\"\n//       />\n//       <Lines\n//         colors={['#E9C939']}\n//         interpolation=\"cardinal\"\n//         lineAttributes={{\n//           strokeLinecap: 'round',\n//           strokeWidth: 5,\n//         }}\n//         lineWidth={0}\n//       />\n//       <Dots\n//         className=\"dots\"\n//         colors={['#007696']}\n//         dotStyle={{\n//           fillOpacity: 0,\n//           transition: 'all 250ms',\n//         }}\n//       />\n//       <Ticks\n//         axis=\"x\"\n//         labelAttributes={{\n//           y: '2.5em',\n//         }}\n//         labelStyle={{\n//           dominantBaseline: 'text-after-edge',\n//           fill: '#000',\n//           fontFamily: 'sans-serif',\n//           fontSize: 10,\n//           fontWeight: 'normal',\n//           textAnchor: 'middle',\n//         }}\n//         ticks={[\n//           {\n//             label: 'JUL',\n//             x: 0,\n//           },\n//           {\n//             label: 'AUG',\n//             x: 1,\n//           },\n//           {\n//             label: 'SEP',\n//             x: 2,\n//           },\n//           {\n//             label: 'OCT',\n//             x: 3,\n//           },\n//           {\n//             label: 'NOV',\n//             x: 4,\n//           },\n//           {\n//             label: 'DEC',\n//             x: 5,\n//           },\n//           {\n//             label: 'JAN',\n//             x: 6,\n//           },\n//           {\n//             label: 'FEB',\n//             x: 7,\n//           },\n//           {\n//             label: 'MAR',\n//             x: 8,\n//           },\n//           {\n//             label: 'APR',\n//             x: 9,\n//           },\n//           {\n//             label: 'MAY',\n//             x: 10,\n//           },\n//           {\n//             label: 'JUN',\n//             x: 11,\n//           },\n//         ]}\n//       />\n//     </Layer>\n//   </Handlers>\n// </Chart>\n","import styled from 'styled-components';\n\nexport const WeatherWrapper = styled.div`\n  padding: 32px;\n  background: rgba(255, 255, 255, 0.23);\n  border-radius: 30px;\n  /* box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1); */\n  /* box-shadow: 0px 5px 10px 0px rgba(0, 255, 255, 0.7); */\n  box-shadow: inset -5px -5px 9px rgba(255, 255, 255, 0.45),\n    inset 5px 5px 9px rgba(94, 104, 121, 0.3);\n  backdrop-filter: blur(5.3px);\n  -webkit-backdrop-filter: blur(5.3px);\n  border: 1px solid rgba(255, 255, 255, 0.77);\n\n  /* &:hover {\n    box-shadow: 0px 10px 20px 2px rgba(0, 255, 255, 0.7);\n  } */\n`;\n","import styled from 'styled-components';\n\nexport const AstroWrapper = styled.div``;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAstroDataFromWeatherApi } from 'redux/location/locOperations';\nimport { getAstroData } from 'redux/location/locSelectors';\nimport { AstroWrapper } from './AstroBox.styled';\n\nfunction AstroUI() {\n  const astro = useSelector(getAstroData);\n\n  //   console.log(astro);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (astro) {\n      return;\n    }\n    dispatch(fetchAstroDataFromWeatherApi());\n  }, [dispatch, astro]);\n\n  return astro ? (\n    <AstroWrapper>\n      <p>\n        Is moon up:\n        <span>{astro.is_moon_up ? 'Yes' : 'No'}</span>\n      </p>\n      <p>\n        Moon illumination:\n        <span>{astro.moon_illumination} %</span>\n      </p>\n      <p>\n        Moon phase:\n        <span>{astro.moon_phase}</span>\n      </p>\n      <p>\n        Moonrise:\n        <span>{astro.moonrise}</span>\n      </p>\n      <p>\n        Moonset:\n        <span>{astro.moonset}</span>\n      </p>\n      <p>\n        Is sun up:\n        <span>{astro.is_sun_up ? 'Yes' : 'No'}</span>\n      </p>\n      <p>\n        Sunrise:\n        <span>{astro.sunrise}</span>\n      </p>\n      <p>\n        Sunset:\n        <span>{astro.sunset}</span>\n      </p>\n    </AstroWrapper>\n  ) : (\n    <div>No astro data available</div>\n  );\n}\n\nexport default React.memo(AstroUI);\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getAdditionalCurrentWeather,\n  getCurrentWeather,\n} from 'redux/location/locSelectors';\nimport { WeatherWrapper } from './WeatherBox.styled';\nimport AstroUI from '../AstroBox/AstroBox';\n\nfunction WeatherUI() {\n  const weather = useSelector(getCurrentWeather);\n  const extraWeather = useSelector(getAdditionalCurrentWeather);\n\n  // console.log(weather);\n  // console.log(extraWeather);\n\n  const [showAstro, setShowAstro] = useState(false);\n\n  const onShowAstroBtnClick = () => {\n    setShowAstro(!showAstro);\n  };\n\n  return weather && extraWeather ? (\n    <WeatherWrapper>\n      <p>\n        Max temperature:\n        <span>{weather.daily.temperature_2m_max[0]} °C</span>\n      </p>\n      <p>\n        Min temperature:\n        <span>{weather.daily.temperature_2m_min[0]} °C</span>\n      </p>\n      <p>\n        Clouds:\n        <span>{extraWeather.cloud} %</span>\n      </p>\n\n      <p>\n        Max windgusts:\n        <span>{weather.daily.windgusts_10m_max[0]} km/h</span>\n      </p>\n      <p>\n        Max windspeed:\n        <span>{weather.daily.windspeed_10m_max[0]} km/h</span>\n      </p>\n      <p>\n        Wind direction:\n        <span>{extraWeather.wind_dir}</span>\n      </p>\n      <p>\n        Pressure:\n        <span>{extraWeather.pressure_mb} millibars</span>\n      </p>\n      <p>\n        Shortwave radiation:\n        <span>{weather.daily.shortwave_radiation_sum[0]} MJ/m²</span>\n      </p>\n      <p>\n        UV:\n        <span>Index {extraWeather.uv} </span>\n      </p>\n      <button type=\"button\" onClick={onShowAstroBtnClick}>\n        Display astrodata\n      </button>\n      {showAstro && <AstroUI />}\n    </WeatherWrapper>\n  ) : (\n    <div>No weather data available</div>\n  );\n}\n\nexport default React.memo(WeatherUI);\n","import daySun from '../images/conditions/day-sun-min.png';\nimport dayClouds from '../images/conditions/day-clouds-min.png';\nimport dayRain from '../images/conditions/day-rain-min.png';\nimport daySnow from '../images/conditions/day-snow-min.png';\nimport dayStorm from '../images/conditions/day-storm-min.png';\nimport dayWind from '../images/conditions/day-wind-min.png';\n\nimport nightMoon from '../images/conditions/night-moon-min.png';\nimport nightClouds from '../images/conditions/night-clouds-min.png';\nimport nightRain from '../images/conditions/night-rain-min.png';\nimport nightWind from '../images/conditions/night-wind-min.png';\nimport nightSnow from '../images/conditions/night-snow-min.png';\nimport nightStorm from '../images/conditions/night-storm-min.png';\n\nexport const conditionsWeatherApi = [\n  {\n    code: 1000,\n    day: 'Sunny',\n    night: 'Clear',\n    icon: 113,\n    png: [daySun, nightMoon],\n  },\n  {\n    code: 1003,\n    day: 'Partly cloudy',\n    night: 'Partly cloudy',\n    icon: 116,\n    png: [dayClouds, nightClouds],\n  },\n  {\n    code: 1006,\n    day: 'Cloudy',\n    night: 'Cloudy',\n    icon: 119,\n    png: [dayClouds, nightClouds],\n  },\n  {\n    code: 1009,\n    day: 'Overcast',\n    night: 'Overcast',\n    icon: 122,\n    png: [dayClouds, nightClouds],\n  },\n  {\n    code: 1030,\n    day: 'Mist',\n    night: 'Mist',\n    icon: 143,\n    png: [dayWind, nightWind],\n  },\n  {\n    code: 1063,\n    day: 'Patchy rain possible',\n    night: 'Patchy rain possible',\n    icon: 176,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1066,\n    day: 'Patchy snow possible',\n    night: 'Patchy snow possible',\n    icon: 179,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1069,\n    day: 'Patchy sleet possible',\n    night: 'Patchy sleet possible',\n    icon: 182,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1072,\n    day: 'Patchy freezing drizzle possible',\n    night: 'Patchy freezing drizzle possible',\n    icon: 185,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1087,\n    day: 'Thundery outbreaks possible',\n    night: 'Thundery outbreaks possible',\n    icon: 200,\n    png: [dayStorm, nightStorm],\n  },\n  {\n    code: 1114,\n    day: 'Blowing snow',\n    night: 'Blowing snow',\n    icon: 227,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1117,\n    day: 'Blizzard',\n    night: 'Blizzard',\n    icon: 230,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1135,\n    day: 'Fog',\n    night: 'Fog',\n    icon: 248,\n    png: [dayWind, nightWind],\n  },\n  {\n    code: 1147,\n    day: 'Freezing fog',\n    night: 'Freezing fog',\n    icon: 260,\n    png: [dayWind, nightWind],\n  },\n  {\n    code: 1150,\n    day: 'Patchy light drizzle',\n    night: 'Patchy light drizzle',\n    icon: 263,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1153,\n    day: 'Light drizzle',\n    night: 'Light drizzle',\n    icon: 266,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1168,\n    day: 'Freezing drizzle',\n    night: 'Freezing drizzle',\n    icon: 281,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1171,\n    day: 'Heavy freezing drizzle',\n    night: 'Heavy freezing drizzle',\n    icon: 284,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1180,\n    day: 'Patchy light rain',\n    night: 'Patchy light rain',\n    icon: 293,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1183,\n    day: 'Light rain',\n    night: 'Light rain',\n    icon: 296,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1186,\n    day: 'Moderate rain at times',\n    night: 'Moderate rain at times',\n    icon: 299,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1189,\n    day: 'Moderate rain',\n    night: 'Moderate rain',\n    icon: 302,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1192,\n    day: 'Heavy rain at times',\n    night: 'Heavy rain at times',\n    icon: 305,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1195,\n    day: 'Heavy rain',\n    night: 'Heavy rain',\n    icon: 308,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1198,\n    day: 'Light freezing rain',\n    night: 'Light freezing rain',\n    icon: 311,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1201,\n    day: 'Moderate or heavy freezing rain',\n    night: 'Moderate or heavy freezing rain',\n    icon: 314,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1204,\n    day: 'Light sleet',\n    night: 'Light sleet',\n    icon: 317,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1207,\n    day: 'Moderate or heavy sleet',\n    night: 'Moderate or heavy sleet',\n    icon: 320,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1210,\n    day: 'Patchy light snow',\n    night: 'Patchy light snow',\n    icon: 323,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1213,\n    day: 'Light snow',\n    night: 'Light snow',\n    icon: 326,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1216,\n    day: 'Patchy moderate snow',\n    night: 'Patchy moderate snow',\n    icon: 329,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1219,\n    day: 'Moderate snow',\n    night: 'Moderate snow',\n    icon: 332,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1222,\n    day: 'Patchy heavy snow',\n    night: 'Patchy heavy snow',\n    icon: 335,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1225,\n    day: 'Heavy snow',\n    night: 'Heavy snow',\n    icon: 338,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1237,\n    day: 'Ice pellets',\n    night: 'Ice pellets',\n    icon: 350,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1240,\n    day: 'Light rain shower',\n    night: 'Light rain shower',\n    icon: 353,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1243,\n    day: 'Moderate or heavy rain shower',\n    night: 'Moderate or heavy rain shower',\n    icon: 356,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1246,\n    day: 'Torrential rain shower',\n    night: 'Torrential rain shower',\n    icon: 359,\n    png: [dayRain, nightRain],\n  },\n  {\n    code: 1249,\n    day: 'Light sleet showers',\n    night: 'Light sleet showers',\n    icon: 362,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1252,\n    day: 'Moderate or heavy sleet showers',\n    night: 'Moderate or heavy sleet showers',\n    icon: 365,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1255,\n    day: 'Light snow showers',\n    night: 'Light snow showers',\n    icon: 368,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1258,\n    day: 'Moderate or heavy snow showers',\n    night: 'Moderate or heavy snow showers',\n    icon: 371,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1261,\n    day: 'Light showers of ice pellets',\n    night: 'Light showers of ice pellets',\n    icon: 374,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1264,\n    day: 'Moderate or heavy showers of ice pellets',\n    night: 'Moderate or heavy showers of ice pellets',\n    icon: 377,\n    png: [daySnow, nightSnow],\n  },\n  {\n    code: 1273,\n    day: 'Patchy light rain with thunder',\n    night: 'Patchy light rain with thunder',\n    icon: 386,\n    png: [dayStorm, nightStorm],\n  },\n  {\n    code: 1276,\n    day: 'Moderate or heavy rain with thunder',\n    night: 'Moderate or heavy rain with thunder',\n    icon: 389,\n    png: [dayStorm, nightStorm],\n  },\n  {\n    code: 1279,\n    day: 'Patchy light snow with thunder',\n    night: 'Patchy light snow with thunder',\n    icon: 392,\n    png: [dayStorm, nightStorm],\n  },\n  {\n    code: 1282,\n    day: 'Moderate or heavy snow with thunder',\n    night: 'Moderate or heavy snow with thunder',\n    icon: 395,\n    png: [dayStorm, nightStorm],\n  },\n];\n","import styled from 'styled-components';\n\nexport const DataWrapper = styled.div`\n  width: 70%;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  gap: 32px;\n  margin: 0 auto;\n  border-radius: 30px;\n  padding: 32px;\n  background: rgba(255, 255, 255, 0.13);\n  /* box-shadow: inset -5px -5px 9px rgba(255, 255, 255, 0.45),\n    inset 5px 5px 9px rgba(94, 104, 121, 0.3); */\n  box-shadow: -5px -5px 80px #fff, 5px 5px 20px #babecc;\n  backdrop-filter: blur(2.3px);\n  -webkit-backdrop-filter: blur(2.3px);\n  border: 1px solid rgba(255, 255, 255, 0.77);\n`;\n\nexport const WeatherDataWrapper = styled.div`\n  display: flex;\n  /* flex-direction: row-reverse; */\n  justify-content: space-between;\n\n  /* align-items: flex-end; */\n  gap: 16px;\n`;\n\nexport const WeatherInfoWrapper = styled.div`\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: flex-end;\n  gap: 16px;\n  border-radius: 30px;\n  background: rgba(255, 255, 255, 0.28);\n  border-radius: 16px;\n  /* box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1); */\n  /* box-shadow: -2px -2px 5px white, 3px 3px 5px rgba(0, 0, 0, 0.1); */\n  box-shadow: inset 2px 2px 5px #babecc, inset -5px -5px 10px #fff;\n  backdrop-filter: blur(5px);\n  -webkit-backdrop-filter: blur(5px);\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & img {\n    width: 220px;\n  }\n`;\n\nexport const CityName = styled.p`\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[1]};\n  font-size: 20px;\n  line-height: ${p => p.theme.lineHeights.main};\n  color: ${p => p.theme.colors.mainDark};\n\n  @media screen and (min-width: 768px) {\n    font-size: 32px;\n  }\n`;\n\nexport const WeatherConditions = styled.div`\n  padding: 10px;\n  color: ${p => p.theme.colors.mainLight};\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[0]};\n  font-size: 20px;\n  line-height: ${p => p.theme.lineHeights.main};\n  background-color: ${p => p.theme.colors.mainAccentPink};\n  border-radius: ${p => p.theme.radii.main};\n`;\n\nexport const IndicatorsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Indicator = styled.div`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: ${p => p.theme.radii.main};\n  padding: 10px;\n\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[0]};\n  font-size: 20px;\n  line-height: ${p => p.theme.lineHeights.main};\n  color: ${p =>\n    p.color === 'blue'\n      ? p.theme.colors.accentBlue\n      : p.color === 'pink'\n      ? p.theme.colors.accentPink\n      : p.theme.colors.accentViolet};\n  background-color: ${p =>\n    p.color === 'blue'\n      ? p.theme.colors.bgBlue\n      : p.color === 'pink'\n      ? p.theme.colors.bgPink\n      : p.theme.colors.bgViolet};\n`;\n\nexport const TemperatureWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-end;\n`;\n\nexport const FeelsLike = styled.span`\n  font-size: 20px;\n  font-family: ${p => p.theme.fonts.main};\n  font-weight: ${p => p.theme.fontWeights[0]};\n  line-height: ${p => p.theme.lineHeights.main};\n  color: ${p => p.theme.colors.textGrey};\n`;\nexport const Temperature = styled.p`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  font-family: ${p => p.theme.fonts.main};\n\n  font-weight: ${p => p.theme.fontWeights[1]};\n  font-size: 96px;\n  line-height: ${p => p.theme.lineHeights.main};\n  color: ${p => p.theme.colors.mainDark};\n\n  & span {\n    font-weight: ${p => p.theme.fontWeights[0]};\n    font-size: 24px;\n  }\n`;\n","import { CardUI } from 'components/Card/Card';\nimport { ChartsUI } from 'components/ChartBox/Charts';\nimport { Container } from 'components/Container/Container';\nimport WeatherUI from 'components/WeatherBox/WeatherBox';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useGeolocated } from 'react-geolocated';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchAstroDataFromWeatherApi,\n  fetchCity,\n  fetchCurrentWeather,\n  fetchCurrentWeatherFromWeatherApi,\n  fetchWeatherForecastFromWeatherApi,\n} from 'redux/location/locOperations';\nimport {\n  getAdditionalCurrentWeather,\n  getCityName,\n  getCountry,\n  getCurrentLatitude,\n  getCurrentLongitude,\n  getCurrentWeather,\n  getDayTime,\n  getTimezone,\n} from 'redux/location/locSelectors';\nimport { setLatitude, setLongitude } from 'redux/location/locSlice';\nimport { conditionsWeatherApi } from 'utils/conditionsWeatherApi';\nimport {\n  CityName,\n  DataWrapper,\n  FeelsLike,\n  IconWrapper,\n  Indicator,\n  IndicatorsWrapper,\n  Temperature,\n  TemperatureWrapper,\n  WeatherConditions,\n  WeatherDataWrapper,\n  WeatherInfoWrapper,\n} from './Homepage.styled';\n\nconst Homepage = () => {\n  const { coords, isGeolocationAvailable, isGeolocationEnabled } =\n    useGeolocated({\n      positionOptions: {\n        enableHighAccuracy: false,\n      },\n\n      userDecisionTimeout: undefined,\n      suppressLocationOnMount: false,\n    });\n\n  const dispatch = useDispatch();\n  const latitude = useSelector(getCurrentLatitude);\n  const longitude = useSelector(getCurrentLongitude);\n  const city = useSelector(getCityName);\n  const country = useSelector(getCountry);\n  const timezone = useSelector(getTimezone);\n  const weather = useSelector(getCurrentWeather);\n  const extraWeather = useSelector(getAdditionalCurrentWeather);\n  const dayTime = useSelector(getDayTime);\n\n  const [showWeather, setShowWeather] = useState(false);\n  const [weatherPng, setWeatherPng] = useState(null);\n\n  useEffect(() => {\n    if (coords) {\n      dispatch(setLatitude(coords.latitude));\n      dispatch(setLongitude(coords.longitude));\n      dispatch(fetchCity());\n\n      // ----------check exact coordinates\n      // dispatch(setLatitude(48.33));\n      // dispatch(setLongitude(34.77));\n\n      // dispatch(fetchTimezone());\n    }\n    return;\n  }, [coords, dispatch]);\n\n  useEffect(() => {\n    if (extraWeather) {\n      return;\n    }\n    if (coords) {\n      dispatch(fetchAstroDataFromWeatherApi());\n      dispatch(fetchCurrentWeatherFromWeatherApi());\n      dispatch(fetchWeatherForecastFromWeatherApi());\n    }\n  }, [dispatch, extraWeather, coords]);\n\n  useEffect(() => {\n    if (weather) {\n      return;\n    }\n    if (timezone) {\n      dispatch(fetchCurrentWeather());\n    }\n  }, [dispatch, timezone, weather]);\n\n  useEffect(() => {\n    if (extraWeather) {\n      const weatherCode = extraWeather.condition.code;\n      const conditionPng = conditionsWeatherApi.find(\n        cond => cond.code === weatherCode\n      ).png;\n      dayTime ? setWeatherPng(conditionPng[0]) : setWeatherPng(conditionPng[1]);\n    }\n  }, [dayTime, extraWeather]);\n\n  const onWeatherBtnClick = () => {\n    setShowWeather(!showWeather);\n  };\n\n  return !isGeolocationAvailable ? (\n    <div>Your browser does not support Geolocation</div>\n  ) : !isGeolocationEnabled ? (\n    <div>Geolocation is not enabled</div>\n  ) : latitude && longitude ? (\n    <main>\n      <CardUI />\n      <Container>\n        {weather && extraWeather ? (\n          <DataWrapper>\n            <WeatherDataWrapper>\n              <IconWrapper>\n                <img\n                  src={weatherPng}\n                  alt={extraWeather.condition.text}\n                  loading=\"lazy\"\n                />\n              </IconWrapper>\n\n              <TemperatureWrapper>\n                <CityName>\n                  {city}, {country}\n                </CityName>\n                <Temperature>\n                  {extraWeather.temp_c} <span>°C</span>\n                </Temperature>\n\n                <FeelsLike>Feels like {extraWeather.feelslike_c} °C</FeelsLike>\n              </TemperatureWrapper>\n            </WeatherDataWrapper>\n            <WeatherInfoWrapper>\n              <WeatherConditions>\n                <span>{extraWeather.condition.text}</span>\n              </WeatherConditions>\n              <IndicatorsWrapper>\n                <Indicator color=\"blue\">\n                  Precipitation:\n                  <span>{weather.daily.precipitation_sum[0]} mm</span>\n                </Indicator>\n                <Indicator color=\"pink\">\n                  Humidity:\n                  <span>{extraWeather.humidity} %</span>\n                </Indicator>\n                <Indicator color=\"violet\">\n                  Windspeed:\n                  <span>{weather.current_weather.windspeed} km/h</span>\n                </Indicator>\n              </IndicatorsWrapper>\n              <ChartsUI />\n            </WeatherInfoWrapper>\n          </DataWrapper>\n        ) : (\n          <div>No data to display</div>\n        )}\n\n        <button type=\"button\" onClick={onWeatherBtnClick}>\n          Display weather\n        </button>\n        {showWeather && <WeatherUI />}\n      </Container>\n    </main>\n  ) : (\n    <div>Loading...</div>\n  );\n};\n\nexport default Homepage;\n"],"names":["Card","styled","getCityName","state","location","city","getCountry","country","getCityImages","image","getCurrentLongitude","longitude","getCurrentLatitude","latitude","getCurrentWeather","weather","getAdditionalCurrentWeather","weatherAdditional","getDayTime","daytime","getTimezone","timezone","getAstroData","astrodata","getForcast","daily","CardUI","isRowBased","query","mediaMatch","window","matchMedia","useState","matches","setMatches","useEffect","handler","e","addListener","removeListener","useMediaQuery","useSelector","images","setImage","imageMob","setImageMob","dispatch","useDispatch","fetchPexelsImage","length","landscape","portrait","random","Math","floor","style","backgroundImage","bgImg","bgImgMob","backgroundRepeat","backgroundSize","ChartsWrapper","ChartsUI","forecast","dates","time","map","el","tempMin","temperature_2m_min","tempMax","temperature_2m_max","data","index","date","min_temperature","max_temperature","console","log","ResponsiveContainer","width","height","AreaChart","fill","margin","top","right","left","bottom","Tooltip","XAxis","dataKey","Area","type","stackId","stroke","strokeWidth","WeatherWrapper","AstroWrapper","AstroUI","astro","fetchAstroDataFromWeatherApi","is_moon_up","moon_illumination","moon_phase","moonrise","moonset","is_sun_up","sunrise","sunset","React","WeatherUI","extraWeather","showAstro","setShowAstro","cloud","windgusts_10m_max","windspeed_10m_max","wind_dir","pressure_mb","shortwave_radiation_sum","uv","onClick","conditionsWeatherApi","code","day","night","icon","png","daySun","nightMoon","dayClouds","nightClouds","dayWind","nightWind","dayRain","nightRain","daySnow","nightSnow","dayStorm","nightStorm","DataWrapper","WeatherDataWrapper","WeatherInfoWrapper","IconWrapper","CityName","p","theme","fonts","main","fontWeights","lineHeights","colors","mainDark","WeatherConditions","mainLight","mainAccentPink","radii","IndicatorsWrapper","Indicator","color","accentBlue","accentPink","accentViolet","bgBlue","bgPink","bgViolet","TemperatureWrapper","FeelsLike","textGrey","Temperature","useGeolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","undefined","suppressLocationOnMount","coords","isGeolocationAvailable","isGeolocationEnabled","dayTime","showWeather","setShowWeather","weatherPng","setWeatherPng","setLatitude","setLongitude","fetchCity","fetchCurrentWeatherFromWeatherApi","fetchWeatherForecastFromWeatherApi","fetchCurrentWeather","weatherCode","condition","conditionPng","find","cond","Container","src","alt","text","loading","temp_c","feelslike_c","precipitation_sum","humidity","current_weather","windspeed"],"sourceRoot":""}