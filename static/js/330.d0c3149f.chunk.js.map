{"version":3,"file":"static/js/330.d0c3149f.chunk.js","mappings":"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","sources":["components/Card/Card.styled.js","hooks/useMedia.js","components/Card/SearchCard.jsx","pages/SearchPage/SearchPage.jsx","redux/location/locSelectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n  background-image: ${p =>\n    p.image\n      ? p.image\n      : 'linear-gradient(47.75deg, #082276 7.07%, #030f34 97.3%), #082276;'};\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  -webkit-background-size: cover;\n  -o-background-size: cover;\n  -moz-background-size: cover;\n`;\n\nexport const View = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  z-index: -2;\n\n  background: ${p =>\n    p.dayTime\n      ? 'linear-gradient(45deg, rgba(245, 70, 66, 0.45), rgba(8, 83, 156, 0.45))'\n      : 'linear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(117, 19, 93, 0.73))'};\n\n  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#002f4b', endColorstr='#00000000',GradientType=0 );\n  opacity: 0.8;\n`;\n","import { useEffect, useState } from 'react';\n\nexport const useMediaQuery = query => {\n  const mediaMatch = window.matchMedia(query);\n  const [matches, setMatches] = useState(mediaMatch.matches);\n\n  useEffect(() => {\n    const handler = e => setMatches(e.matches);\n    mediaMatch.addListener(handler);\n    return () => mediaMatch.removeListener(handler);\n  });\n  return matches;\n};\n","import { useMediaQuery } from 'hooks/useMedia';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGeoImages } from 'redux/location/locSelectors';\nimport { Card } from './Card.styled';\n\nexport const SearchCardUI = () => {\n  const isRowBased = useMediaQuery('(min-width: 1280px)');\n  const images = useSelector(getGeoImages);\n  const [image, setImage] = useState('');\n  const [imageMob, setImageMob] = useState('');\n\n  useEffect(() => {\n    if (images.length === 0) {\n      return;\n    }\n    if (images.length === 1) {\n      setImage(images[0].landscape);\n      setImageMob(images[0].portrait);\n    }\n    if (images.length > 1) {\n      const random = Math.floor(Math.random() * images.length);\n      setImage(images[random].landscape);\n      setImageMob(images[random].portrait);\n    }\n  }, [images]);\n\n  return (\n    <Card image={!isRowBased ? `url(${imageMob})` : `url(${image})`}>\n      {/* <View /> */}\n    </Card>\n  );\n};\n","import { SearchCardUI } from 'components/Card/SearchCard';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGeoImage } from 'redux/location/locOperations';\nimport { getCityName, getGeoImages } from 'redux/location/locSelectors';\n\nconst { Container } = require('components/Container/Container');\n\nconst SearchPage = () => {\n  const city = useSelector(getCityName);\n  const images = useSelector(getGeoImages);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (city && images.length === 0) {\n      dispatch(fetchGeoImage());\n    }\n  }, [city, dispatch, images.length]);\n\n  return (\n    <main\n      style={{\n        minHeight: '70vh',\n      }}\n    >\n      <SearchCardUI />\n      <Container></Container>\n    </main>\n  );\n};\n\nexport default React.memo(SearchPage);\n","export const getCityId = state => state.location.cityID;\nexport const getCityName = state => state.location.city;\nexport const getCountry = state => state.location.country;\nexport const getCityImages = state => state.location.image;\nexport const getCurrentLongitude = state => state.location.longitude;\nexport const getCurrentLatitude = state => state.location.latitude;\nexport const getCurrentWeather = state => state.location.weather;\nexport const getAdditionalCurrentWeather = state =>\n  state.location.weatherAdditional;\nexport const getDayTime = state => state.location.daytime;\nexport const getTimezone = state => state.location.timezone;\nexport const getAstroData = state => state.location.astrodata;\nexport const getForcast = state => state.location.weatherForecast;\nexport const getDailyForcast = state => state.location.weather.daily;\nexport const getHourlyForcast = state => state.location.weather.hourly;\nexport const getAirData = state => state.location.airdata;\nexport const getHistory = state => state.location.history;\nexport const getHistoryImages = state => state.location.historyImages;\nexport const getDate = state => state.location.date;\nexport const getGeoImages = state => state.location.geoImages;\n"],"names":["Card","styled","p","image","View","dayTime","useMediaQuery","query","mediaMatch","window","matchMedia","useState","matches","setMatches","useEffect","handler","e","addListener","removeListener","SearchCardUI","isRowBased","images","useSelector","getGeoImages","setImage","imageMob","setImageMob","length","landscape","portrait","random","Math","floor","Container","require","SearchPage","city","getCityName","dispatch","useDispatch","fetchGeoImage","style","minHeight","React","state","location","getCountry","country","getCityImages","getCurrentLongitude","longitude","getCurrentLatitude","latitude","getCurrentWeather","weather","getAdditionalCurrentWeather","weatherAdditional","getDayTime","daytime","getTimezone","timezone","getAstroData","astrodata","getForcast","weatherForecast","getDailyForcast","daily","getHourlyForcast","hourly","getAirData","airdata","getHistory","history","getHistoryImages","historyImages","getDate","date","geoImages"],"sourceRoot":""}